/*
 * File: app/controller/Main.js
 *
 * This file was generated by Sencha Architect version 3.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AR.controller.Main', {
    extend: 'Ext.app.Controller',

    requires: [
        'Ext.app.Route',
        'Ext.MessageBox'
    ],

    config: {
        routes: {
            'home': 'ShowHome',
            'categories': 'ShowCategoriesView',
            'authors': 'ShowAuthorsView',
            'myarticles': 'ShowSavedArticles',
            'authors/:id': 'showArticlesOfAuthor',
            'categories/:id': 'showArticlesOfCategory',
            'authors/:id/:articleId': 'showArticleDetailsOfAuthor',
            'categories/:id/:articleId': 'showArticleDetailsOfCategory',
            'home/:id': 'showArticleDetailsfromroutes',
            '': 'emptyHandle'
        },

        refs: {
            appnav: {
                autoCreate: true,
                selector: 'arnavigation',
                xtype: 'arnavigation'
            },
            articleList: 'articlelist',
            categoryview: 'categoryIconView',
            authorview: 'authorIconView',
            settingspage: 'settingsform',
            settingbutton: 'button#settingbtn',
            tabpanel: 'artabpanel'
        },

        control: {
            "button#settingbtn": {
                tap: 'ShowSettingsForm'
            },
            "settingspage": {
                initialize: 'ShowValuesOfForm'
            },
            "button#settingssavebtn": {
                tap: 'SaveSettings'
            },
            "arnavigation": {
                activeitemchange: 'onNavigationviewActiveItemChange'
            },
            "tabpanel": {
                initialize: 'showdefaultActiveitem',
                activeitemchange: 'onTabitemChange'
            },
            "navigationview": {
                back: 'checkurl'
            },
            "button#saveBtn": {
                tap: 'SaveButtonAction'
            },
            "button#mybutton3": {
                tap: 'onButtonTap'
            }
        }
    },

    ShowSettingsForm: function(button, e, eOpts) {
        Ext.Viewport.hideAllMenus();

        this.urlmodify(''+window.location.hash+'/settings');

        appNav=this.getAppnav();
        this.getAppnav().getNavigationBar().backButtonStack[0] = this.getAppnav().getNavigationBar().getTitle();
        settings=Ext.create('AR.view.Setting',{title:AR.locale.Labels.MENUITEM_SETTINGS_LABEL});

        this.getAppnav().push(settings);
    },

    ShowValuesOfForm: function(component, eOpts) {
        var me=this;
        Ext.Ajax.request({
        			url: 'resources/data/settings.json',
        			params: {
        				id: 1
        			},
        			success: function(response){

                       me.getSettingspage();
                      var text = response.responseText;
        				// process server response here

        				var settingdata=Ext.JSON.decode(text);

                        me.getSettingspage();


               Ext.getCmp('languagefield').setOptions(settingdata.language);

               Ext.getCmp('themefield').setOptions(settingdata.theme);

               Ext.getCmp('tabfield').setOptions(settingdata.defaultTabView);

               var settinglocalstore= Ext.data.StoreManager.lookup('settingStore');



        if(settinglocalstore.getCount() >=1 ){
        settinglocalstore.load();

        var datasettings=settinglocalstore.getData().all[0].data;

        Ext.getCmp('languagefield').setValue(datasettings.language);
                Ext.getCmp('themefield').setValue(datasettings.theme);
                      Ext.getCmp('tabfield').setValue(datasettings.defaultTabView);

                      Ext.getCmp('sliderval').setHtml(datasettings.pageSize);

                      Ext.getCmp('togglecom').setValue(datasettings.defaultCatView);
                      Ext.getCmp('slidercom').setValue(datasettings.pageSize);

                      if(datasettings.defaultCatView===0){

                      Ext.getCmp('togglelabel').setHtml(''+AR.locale.Labels.FIELD_ICON_VIEW_LABEL+'');

            }else{

        Ext.getCmp('togglelabel').setHtml(''+AR.locale.Labels.FIELD_LIST_VIEW_LABEL+'');

          }

        			}





                    }





        		});
    },

    SaveSettings: function(button, e, eOpts) {



            var settinglocalstore= Ext.data.StoreManager.lookup('settingStore');

        settinglocalstore.load();

        if(settinglocalstore.getCount() === 0){


        settinglocalstore.add({

        'language':Ext.getCmp('languagefield').getValue(),
        'theme':Ext.getCmp('themefield').getValue(),
        'defaultTabView':Ext.getCmp('tabfield').getValue(),
        'pageSize': Ext.getCmp('slidercom').getValue()[0],
        'defaultCatView':Ext.getCmp('togglecom').getValue()


        			});

        settinglocalstore.sync();

        Ext.Msg.alert('WTC',AR.locale.Labels.SETTINGS_SUCESS_SAVEMESSAGE);

        // AR.util.Message.showAlertMsg('','SETTINGS_SUCESS_SAVEMESSAGE');

        window.location.reload();

        }else{

        var datasettings=settinglocalstore.getData().all[0].data;
        var themeValue = Ext.getCmp('themefield').getValue();


        settinglocalstore.getAt(0).setData({
        'id':settinglocalstore.getAt(0).getData().id,
        'language':Ext.getCmp('languagefield').getValue(),
        'theme':Ext.getCmp('themefield').getValue(),
        'defaultTabView':Ext.getCmp('tabfield').getValue(),
        'pageSize': Ext.getCmp('slidercom').getValue()[0],
        'defaultCatView':Ext.getCmp('togglecom').getValue()


        			});

        settinglocalstore.getAt(0).setDirty();
        settinglocalstore.sync();
        Ext.Msg.alert('WTC',AR.locale.Labels.SETTINGS_SUCESS_SAVEMESSAGE);
          //  AR.util.Message.showAlertMsg('sd','SETTINGS_SUCESS_UPDATEMESSAGE');
            window.location.reload();

         }
    },

    onNavigationviewActiveItemChange: function(container, value, oldValue, eOpts) {
        //debugger;

         //this.getAppnav().getNavigationBar().backButtonStack[0]=this.getAppnav().getNavigationBar().getTitle();

        Ext.getCmp('appmenu').setHidden(false);
        Ext.getCmp('saveBtn').setHidden(true);

        if(!Ext.isEmpty(value.getConfig)){


            if( !Ext.isEmpty (value.config.menubtn) ){

                if(value.getConfig('menubtn')=="false"){

                    Ext.getCmp('appmenu').setHidden(true);

                }


            }

               if( !Ext.isEmpty (value.config.saveopt) ){

                if(value.getConfig('saveopt')=="true"){

                    Ext.getCmp('saveBtn').setHidden(false);

                }


            }



        }


    },

    showdefaultActiveitem: function(component, eOpts) {
           var el=component;
           var settinglocalstore= Ext.data.StoreManager.lookup('settingStore');

           settinglocalstore.load();


           if(settinglocalstore.getCount() >= 1){

                var datasettings=settinglocalstore.getData().all[0].data;




        // for setting default list View / Icon View

                if(datasettings.defaultCatView==1){

                    el.removeAt(2);

        			//var c= Ext.create('AR.view.category.List');

                    el.insert(2,{ title:AR.locale.Labels.CATEGORY_TAB_LABEL,
                    iconCls :'category',activeItem:2,zIndex:2,itemId:'CategoryTree',
                    xtype:'categoryTreeView'});
        			}
           }
    },

    onTabitemChange: function(container, value, oldValue, eOpts) {
        	var navBar = this.getAppnav().getNavigationBar();


         if(Ext.isFunction(value.getItemId)){

                 /*this.getApplication().getHistory().add(new Ext.app.Action({
        				url: value.getItemId()
        			}), true);*/
            // console.log(value.getItemId());
              this.urlmodify(value.getItemId());

        	}
        if(container.indexOf(value)== 2 || container.indexOf(value)== 3){

        			navBar.setTitle(this.getViewTitle(container.indexOf(value)-1));

        		}else{

        			if(!Ext.isEmpty(value.config)){

        			navBar.setTitle(value.config.title);

        			}

        		}
    },

    checkurl: function(navigationview, eOpts) {

        document.title="AR";

        		var urlArrry=window.location.hash.split('/');
        		var k=0;
        		if(urlArrry.length > 2){

        		var rep=urlArrry.length-2;

                 }else{
        //debugger;

                rep =0;

              }
                 var fineurl="";
            for(var u in urlArrry){

        if(k <= rep){
                   fineurl +=urlArrry[k];
          fineurl +='/';
        }
        k++;

        		}

               var fineurl=fineurl.replace('#','');
               fineurl = fineurl.substring(0, fineurl.length - 1);
               this.urlmodify(fineurl);
    },

    SaveButtonAction: function(button, e, eOpts) {
        var loadingMaskText = 'Saving article';

        		Ext.Viewport.mask({ xtype: 'loadmask',message: loadingMaskText, indicator:true });

        		var navView = button.up('navigationview');

        		if(!Ext.isEmpty(navView)){

        			var record = null;

        				record = navView.getActiveItem().getRecord();

        			if(Ext.isEmpty(record)){

        				record =  Ext.ComponentQuery.query('articleDetail')[0].getRecord();

        			}


        			if(!Ext.isEmpty(record))

        				this.saveArticle(record);

        		}else{
        		var record = navView.getActiveItem().getRecord();
        		console.log(record.data.title);
        		}
    },

    onButtonTap: function(button, e, eOpts) {
        Ext.Viewport.hideAllMenus();

        this.urlmodify(''+window.location.hash+'/AboutApp');



        this.getAppnav().getNavigationBar().backButtonStack[0] = this.getAppnav().getNavigationBar().getTitle();

        this.getAppnav().push({xtype:'about',appmenu:"false",title:'Article Reader Application'});
    },

    ShowHome: function() {

          this.urlmodify('home');

          var defaultTabItem = 0;
          var defaultCatView = 0;
          var settingStore= Ext.getStore('settingStore');

        	if(!Ext.isEmpty(settingStore)){

               settingStore.load({
                   callback: function(records, operation, success) {

        			if(success){

        				if(records.length > 0 ) {

                        defaultTabItem = records[0].data.defaultTabView;
                        defaultCatView =  records[0].data.defaultCatView;
        				}
        			}
                  }
              });
        	}

         this.showRoutesView(defaultTabItem,defaultCatView);

    },

    ShowCategoriesView: function() {
        this.showRoutesView(AR.util.Utility.CATEGORY_TAB_NO);

    },

    ShowAuthorsView: function() {
        this.showRoutesView(AR.util.Utility.AUTHORS_TAB_NO);
    },

    ShowSavedArticles: function() {
         this.showRoutesView(AR.util.Utility.SAVEDARTICLES_TAB_NO);

    },

    getViewTitle: function(activeTabNo) {


        	var title = '';
        	if(Ext.isEmpty(activeTabNo)){

        		title =  AR.locale.Labels.ARTICLES_VIEW_TITLE;
        	}else{

        switch (activeTabNo){

        case 0 :

        			title = AR.locale.Labels.ARTICLES_VIEW_TITLE;
        			break;

        case 1:

        			title = AR.locale.Labels.CATEGORY_VIEW_TITLE;
        			break;
        case 2:

        			title = AR.locale.Labels.AUTHORS_VIEW_TITLE;
        			break;

        case 3:

        			title = AR.locale.Labels.SAVEDARTI_VIEW_TITLE;
        			break;

        default :

        			title = '';

         }
        }


        	return title;

    },

    showRoutesView: function(activeTabNo, defaultCatView) {

        	var navView	= this.getAppnav();
        	var viewTitle	= this.getViewTitle(activeTabNo);

        	if(!Ext.isEmpty(navView)){

        	/*	var view = Ext.create('AR.view.Tabpanel', {
                     title : viewTitle
        		}); */

               // navView.add(view);
              navView.getNavigationBar().setTitle(this.getViewTitle(0));
              //  this.getAppnav().getNavigationBar().backButtonStack[0]=this.getViewTitle(0);
                var tabpanelarticles=Ext.create('AR.store.ArticleStore',{autoLoad:true});

                view = this.getTabpanel();


                view.getAt(0).setStore(tabpanelarticles);

        		if(defaultCatView==1){

        			if(activeTabNo == 1){
        			view.setActiveItem(view.getAt(2));
                       } else{
                    view.setActiveItem(activeTabNo);

                     }

                 }else{

                     view.setActiveItem(activeTabNo);

                 }



        		Ext.Viewport.add(navView);
        	}

    },

    launch: function() {
         var me = this;

         this.getApplication().on('articleListItemDisclose',function(list,record,target,index,e,eOpts){
             me.showArticleDetailView(list,record,target,index,e,eOpts);
           }
           );





    },

    urlmodify: function(urlparam) {
          this.getApplication().getHistory().add(new Ext.app.Action({
                    url: urlparam
                }), true);

    },

    saveArticle: function(record) {
        var localArticleStore = Ext.getStore('articleLocalStore');

        localArticleStore.load();

        if (null == localArticleStore.findRecord('articleId', record.data.id)) {

        		localArticleStore.add({
        					articleId	: record.data.id,
        					title		: record.data.title,
        					date		: record.data.date,
        					content: record.data.content,
        					excerpt	: record.data.excerpt,
        					status: record.data.status,
        					author	: record.data.author
        				});
            }

         localArticleStore.sync();

                 Ext.Msg.alert('',AR.locale.Labels.ARTICLE_SUCESS_SAVEMESSAGE);

        		Ext.Viewport.unmask();
    },

    showArticleDetailView: function(list, record, target, index, e, eOpts) {
         this.urlmodify(''+window.location.hash+'/'+record.getData().id+'');

        		var appNav = this.getAppnav();

        		if(appNav){

                    if(!Ext.isBoolean(list)){
        			var saveValue = list.config.localArticleView;
                    }else{
        			var saveValue =false;
        			}

        			var exp = /<a\s.*href=['"](\b(https?|ftp|file|http):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|].(jpg|jpeg|gif|JPG|png|PNG))['"].*>.*<\/a>/ig;
                     record.data.content = record.data.content.replace(exp,"<img src='$1' />");
               record.data.content  =Ext.String.htmlDecode(record.data.content);
                    document.title=record.data.title;
        			appNav.push({
        				xtype: 'articleDetail',
        				title: record.data.title,
        				record: record,
                        layout:'fit',

                        html  : "<div class='articleContent'>"+record.data.content+"</div>",
                        saveopt: 'true'

        			});


        		}

    },

    showArticlesOfAuthor: function(id) {
        	if(!Ext.Viewport.down('tabpanel')){

        //Ext.Viewport.add(this.getAppnav());

        this.ShowAuthorsView();




        	}
        this.urlmodify('authors/'+id+'');

        Author= Ext.data.StoreManager.lookup('authorStore');

        if(!Ext.isEmpty(Author.getTotalCount())){
          var authortitle=Author.getById(id).getData().first_name;
          var authortitle = AR.locale.Labels.ARTICLELIST_VIEW_TITLE+"-By "+authortitle;

           }else{
            var  authortitle = AR.locale.Labels.AUTHORS_VIEW_TITLE;
            }


        this.getAppnav().getNavigationBar().backButtonStack[0]=AR.locale.Labels.AUTHORS_VIEW_TITLE;

        var Articls_auth=Ext.create('AR.store.ArticleStore',{autoLoad:false});
                   Articls_auth.setParams({'author':id});
                   Articls_auth.load();
        var Articles= Ext.create('AR.view.article.List',{store:Articls_auth,title:authortitle});
        this.getAppnav().push(Articles);
    },

    showArticlesOfCategory: function(id) {
        if(!Ext.Viewport.down('tabpanel')){

                   // Ext.Viewport.add(this.getMainnav());

                    this.ShowCategoriesView();

        			// this.urlmodify('categories/'+categoryId+'');

        		}

        this.urlmodify('categories/'+id+'');



        categorys= Ext.data.StoreManager.lookup('CategoryStore');

        if(!Ext.isEmpty(categorys.getTotalCount())){
          var categorytitle=Author.getById(id).getData().first_name;
          var categorytitle = AR.locale.Labels.ARTICLELIST_VIEW_TITLE+"-By "+authortitle;

           }else{
            var  categorytitle = AR.locale.Labels.AUTHORS_VIEW_TITLE;
            }


         this.getAppnav().getNavigationBar().backButtonStack[0]=AR.locale.Labels.CATEGORY_VIEW_TITLE;

          var Articls_cate=Ext.create('AR.store.ArticleStore',{autoLoad:false});
          Articls_cate.setParams({'cat':id});
          Articls_cate.load();
          var Articles= Ext.create('AR.view.article.List',{store:Articls_cate,title:categorytitle});
          this.getAppnav().push(Articles);
    },

    showArticleDetailsOfAuthor: function(id, articleId) {
         this.showArticlesOfAuthor(id);
         this.showArticleDetail(articleId,'authors',id);
    },

    showArticleDetailsOfCategory: function(id, articleId) {
         this.showArticlesOfCategory(id);
         this.showArticleDetail(articleId,'category',id);
    },

    showArticleDetail: function(articleId, fromview, filterbyid) {
        	var me = this;

        		if(Ext.isEmpty(fromview)){



        records=Ext.create('AR.store.ArticleStore',{autoLoad:false});
        records.setParams({'post_id':articleId,url:AR.util.Utility.api.singlePost});
        		}else{

        if(fromview=="authors"){
         records=Ext.create('AR.store.ArticleStore',{autoLoad:false});
         records.setParams({'author':filterbyid});
          }

          if(fromview=="category"){
          records=Ext.create('AR.store.ArticleStore',{autoLoad:false});
          records.setParams({'cat':filterbyid});
          }



        		}
         records.load(function(records1, operation, success) {

        var inde = records.find('articleId',articleId);

        if(records1[inde]!= -1){
        me.showArticleDetailView(true,records1[inde]);
              }


               }, this);
    },

    showArticleDetailsfromroutes: function(id) {

             var list=false;

        		var appNav = this.getAppnav();


                    appNav.removeAll();

             if(appNav){

                 if(!Ext.isBoolean(list)){
        			var saveValue = list.config.localArticleView;
                    }else{
                   var saveValue =false;
                  }



        			var exp = /<a\s.*href=['"](\b(https?|ftp|file|http):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|].(jpg|jpeg|gif|JPG|png|PNG))['"].*>.*<\/a>/ig;



                   records=Ext.create('AR.store.ArticleStore',{autoLoad:false});
                   records.setParams({'post_id':id});



                records.load({url:AR.util.Utility.api.singlePost, reader: {
                        type: 'json',
                        rootProperty: 'post'
                    },callback:function(records1, operation, success) {


                   record=operation.getResponse().post;


                   record.content = record.content.replace(exp,"<img src='$1' />");

                    record.content =Ext.String.htmlDecode(record.content);
                    document.title=record.title;
                   debugger;
        			var detailview=Ext.create('AR.view.article.Detail',{
                            title: record.title,
        					record: record,fullScreen:true,
                            saveopt:"false",

                            layout:'fit',
        					html: "<div class='articleContent'>"+record.content+"</div>"});

                 // appNav.getNavigationBar().getBackButton().setHidden(true);

                  appNav.insert(0,detailview);
                    Ext.Viewport.add(appNav);
                        appNav.getNavigationBar().getBackButton().hide();

                    }});


        		}
    },

    emptyHandle: function() {
        this.ShowHome();
    }

});