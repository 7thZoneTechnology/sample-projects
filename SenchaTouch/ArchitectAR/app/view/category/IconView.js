/*
 * File: app/view/category/IconView.js
 *
 * This file was generated by Sencha Architect version 3.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AR.view.category.IconView', {
    extend: 'Ext.dataview.DataView',
    alias: 'widget.categoryIconView',

    requires: [
        'Ext.XTemplate',
        'AR.util.Utility'
    ],

    config: {
        itemId: 'mydataview',
        style: 'margin: 0 2% 0 2%;',
        inline: true,
        store: 'CategoryStore',
        itemTpl: Ext.create('Ext.XTemplate', 
            '<div class="tbox" style="height:{[this.caldim(xcount,"h")]}px;width:{[this.caldim(xcount,"w")]}px;background:{% if(xindex === 0) { ty=xindex-1; } if ( xindex <= this.colorslen()) { ty++;  } else { if( ty >= this.colorslen() ) { ty=0;  } else{ ty++; }   }  %}{[this.colors(ty)]}" > <div class="tboxInnerCategory">',
            '<tpl if="post_count &gt; 0">',
            '<div class="digit-div" ><span class="digit" style="font-size:{[this.calfont(xcount)]}px">{post_count}</span></div>',
            '</tpl>			',
            '<div class="titleBox" style="font-size:{[this.calfonttext(xcount)]}px" >{title}</div>',
            '</div>',
            '</div>',
            {
                colors: function(col) {
                    return AR.util.Utility.colors[col];
                },
                calwidth: function(c) {
                    var mintile = 160;
                    var width = Ext.getDoc().dom.clientWidth;

                    if(  width < 360)
                    {
                        var mintile = 100;
                    }

                    margin = width * 0.02 * 2;

                    var finalwidth = width - margin;
                    var pertile  = Math.floor(finalwidth / mintile) ;

                    pertile = pertile -1;

                    var finalwidth = finalwidth - (5 * pertile);
                    var tilewidth= finalwidth / pertile;


                    return tilewidth;
                },
                caldim: function(integer, dim) {
                    while (this.isPrime(integer)){
                        integer++;
                    }
                    var factor1=  this.getFactors(integer);
                    var factor2=  this.getSecondfactor(integer,factor1);


                    var width =   Ext.getDoc().dom.clientWidth  - 20  ;

                    margin = width * 0.02 * 2;
                    var width = width- margin;
                    tabbarheight =Ext.ComponentQuery.query('artabpanel')[0].getTabBar().element.dom.clientHeight;
                    var height =  Ext.getDoc().dom.clientHeight - ( 2 * tabbarheight ) - 10;



                    if(width >= height){

                        var tilewidth = width  / Math.max(factor1,factor2);
                        var tileheight = height/ Math.min(factor1,factor2);
                    }else{

                        var tilewidth = width / Math.min(factor1,factor2);
                        var  tileheight =  height  / Math.max(factor1,factor2);

                    }
                    //~ console.log(width+"--"+height);
                    //~ console.log(factor1+"--"+factor2);
                    //~ console.log(tilewidth+"--"+tileheight);

                    if(dim=="h"){
                        return Math.floor(tileheight);
                    }else{
                        return Math.floor(tilewidth);
                    }

                },
                getFactors: function(integer) {
                    var factors = [],
                        quotient = 0;

                    for(var i = 1; i <= integer; i++){
                        quotient = integer/i;

                        if(quotient === Math.floor(quotient)){
                            factors.push(i);
                        }
                    }
                    var firstfactorindex= Math.floor(factors.length/2);
                    var firstfactor=factors[firstfactorindex];
                    return firstfactor;
                },
                getSecondfactor: function(number, ffc) {
                    return number/ffc;
                },
                isPrime: function(numb) {
                    for(var i=2; i<= Math.sqrt(numb); i++){
                        if(numb % i === 0){

                            return false;
                        }
                    }
                    return true;
                },
                calfont: function(count) {
                    var h=this.caldim(count,"h");
                    font= h/2 ;
                    if(font >= 120){
                        font =120;
                    }
                    return font;
                },
                calfonttext: function(count) {
                    var h=this.caldim(count,"h");
                    font= h/8;
                    if(font >= 20){
                        font = 20;
                    }
                    return  font;
                },
                colorslen: function() {
                    return AR.util.Utility.colors.length-1;
                }
            }
        )
    }

});